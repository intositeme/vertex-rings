require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

//'use strict';

window.$ = require("jquery");
// TweenMax = require ('gsap');
// $('h1').css('background-color', "red");
console.log('hello world');
window.THREE = require('three');

var sectionHolder = document.querySelectorAll('section.post-content')[0];
console.log($(sectionHolder).width());
//sectionHolder.appendChild(renderer.domElement);

var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera(75, $(sectionHolder).width() / window.innerHeight, 0.1, 1000);
// camera = new THREE.PerspectiveCamera(45, canvasWidth / canvasHeight, 1, 100);
camera.position.set(0, 0, 10);
camera.lookAt(scene.position);
camera.position.z = 5;
scene.add(camera);

var renderer = new THREE.WebGLRenderer();
renderer.setSize($(sectionHolder).width(), window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);
console.log('window.devicePixelRatio', window.devicePixelRatio);
//

var sphere;

var WIDTH = window.innerWidth;
var HEIGHT = window.innerHeight;

var render = function render() {
	requestAnimationFrame(render);

	renderer.render(scene, camera);
};

render();

function init() {
	var geometry = new THREE.Geometry();
	geometry.vertices.push(new THREE.Vector3(-5, 5, 0), new THREE.Vector3(-5, -5, 0), new THREE.Vector3(5, -5, 0), new THREE.Vector3(-2, 5, 0), new THREE.Vector3(10, -5, 0), new THREE.Vector3(-3, 5, 0));

	geometry.faces.push(new THREE.Face3(0, 1, 2));
	geometry.faces.push(new THREE.Face3(0, 2, 3));
	geometry.faces.push(new THREE.Face3(1, 2, 3));
	geometry.faces.push(new THREE.Face3(1, 3, 0));
	geometry.computeBoundingSphere();

	var triangleMaterial = new THREE.MeshBasicMaterial({
		color: 0xFFFFFF,
		side: THREE.DoubleSide,
		wireframe: true
	});

	var triangleMesh = new THREE.Mesh(geometry, triangleMaterial);
	triangleMesh.position.set(-1.5, 0.0, -14.0);
	scene.add(triangleMesh);
}

/**
 * Draw Circle Ring Mesh
 */
function drawCircle() {
	var resolution = 8;
	var amplitude = 10;
	var size = 360 / resolution;

	var geometry = new THREE.Geometry();
	var material = new THREE.MeshBasicMaterial({ color: 0xFFFFFF,
		side: THREE.DoubleSide,
		wireframe: true });
	// geometry.vertices.push(  new THREE.Vector3( 0, 0, 0 ) );
	for (var i = 0; i <= resolution; i++) {
		var segment = i * size * Math.PI / 180;
		var segment2 = (i * size + size * 0.5) * Math.PI / 180;
		geometry.vertices.push(new THREE.Vector3(Math.cos(segment) * amplitude, Math.sin(segment) * amplitude, 0));
		geometry.vertices.push(new THREE.Vector3(Math.cos(segment2) * (amplitude - 2), Math.sin(segment2) * (amplitude - 2), 0));
	}

	for (i = 0; i < geometry.vertices.length - 2; i++) {
		geometry.faces.push(new THREE.Face3(i, i + 1, i + 2));
	}
	console.log('Vertices', geometry.faces);
	geometry.computeBoundingSphere();

	var ringMesh = new THREE.Mesh(geometry, material);
	ringMesh.position.set(-1.5, 0.0, -14.0);
	scene.add(ringMesh);
}

/**
 * Draw Raw Buffer Circle Geomertry 
 */
function drawRawCircle() {
	var triangles = 500;
	var geometry = new THREE.BufferGeometry();
	var resolution = 8;
	var amplitude = 10;
	var size = 360 / resolution;

	var colors = new Float32Array(resolution * 4 * 3);
	var vertices = new Float32Array(resolution * 2 * 3);

	for (var i = 0; i < resolution; i++) {
		var segment = i * size * Math.PI / 180;
		var segment2 = (i + 1) * size * Math.PI / 180;
		//outer ring
		vertices[i * 6] = Math.cos(segment) * amplitude;
		vertices[i * 6 + 1] = Math.sin(segment) * amplitude;
		vertices[i * 6 + 2] = 0;
		//inner ring
		vertices[i * 6 + 3] = Math.cos(segment2) * (amplitude - 2);
		vertices[i * 6 + 4] = Math.sin(segment2) * (amplitude - 2);
		vertices[i * 6 + 5] = 0;

		vertices[i * 6 + 6] = 0;
		vertices[i * 6 + 7] = 0;
		vertices[i * 6 + 8] = 0;

		// push R G B A for each Vertice Set
		colors[i * 12] = Math.random();
		colors[i * 12 + 1] = Math.random();
		colors[i * 12 + 2] = Math.random();
		colors[i * 12 + 3] = Math.random();

		// push R G B A for each Vertice Set
		colors[i * 12 + 4] = Math.random();
		colors[i * 12 + 5] = Math.random();
		colors[i * 12 + 6] = Math.random();
		colors[i * 12 + 7] = Math.random();

		colors[i * 12 + 8] = Math.random();
		colors[i * 12 + 9] = Math.random();
		colors[i * 12 + 10] = Math.random();
		colors[i * 12 + 11] = Math.random();
	}

	geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));
	geometry.addAttribute('color', new THREE.BufferAttribute(colors, 4));

	var material = new THREE.RawShaderMaterial({
		uniforms: {
			time: { type: "f", value: 1.0 }
		},
		vertexShader: document.getElementById('vertexshader').textContent,
		fragmentShader: document.getElementById('fragmentshader').textContent,
		side: THREE.DoubleSide,
		transparent: false,
		wireframe: true
	});

	var mesh = new THREE.Mesh(geometry, material);
	mesh.position.set(-1.5, 0.0, -14.0);
	scene.add(mesh);
}

sectionHolder.appendChild(renderer.domElement);
init();
// drawCircle();
drawRawCircle();

},{"jquery":4,"three":5}]},{},[1]);
